name: Unit Tests

on:
  push:
    branches:
    - 'master'
    - 'main'
  pull_request:
    branches:
    - 'master'
    - 'main'

jobs:
  testing:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest, macos-12 ]
        environment: [ test ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.29.0
        environments: ${{ matrix.environment }}
        frozen: true

#    - name: Install project
##      run: pixi install --no-interaction
#      run: pixi install -e test

    - name: Run tests
      run: pixi run -e ${{ matrix.environment }} test

#    - name: Upload coverage reports to Codecov
#      uses: codecov/codecov-action@v4.5.0
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }}
#        slug: scikit-learn-contrib/project-template

####################################################################################

#    - name: Set up Python 3.10
#      uses: actions/setup-python@v3
#      with:
#        python-version: "3.10"
#
#    - name: Install Poetry dependancy manager
#      uses: snok/install-poetry@v1
#      with:
#        virtualenvs-create: true
#        virtualenvs-in-project: true
#        installer-parallel: true
#
#    - name: Load cached venv
#      id: cached-poetry-dependencies
#      uses: actions/cache@v3
#      with:
#        path: .venv
#        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#
#    - name: Install dependencies
#      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      run: poetry install --no-interaction --no-root
#
#    - name: Install project
#      run: poetry install --no-interaction
#
#    - name: Install dependencies
#      run: |
#        source .venv/bin/activate
#        python -m pip install --upgrade pip
#        pip install flake8 mypy pydocstyle coverage black
#
###########################
#    - name: Test with pytest
#      run: |
#        source .venv/bin/activate
#        coverage run -m pytest tests/
#
##    - name: Lint with flake8
##      if: ${{ always() }}
##      run: |
##        source .venv/bin/activate
##        # stop the build if there are Python syntax errors or undefined names
##        flake8 --count --select=E9,F63,F7,F82 --show-source --statistics bde
##        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
##        flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics bde
###########################
#
#    # - name: Generate coverage reports
#    #   run: |
#    #     source .venv/bin/activate
#    #     coverage report -m
#        # coverage xml
#    # - name: Upload coverage reports to Codecov
#    #   uses: codecov/codecov-action@v4.0.1
#    #   with:
#    #     token: ${{ secrets.CODECOV_TOKEN }}
#    #     file: ./coverage.xml
#    #     flags: unittests
#    # - name: Run Flake8
#    #   run: |
#    #     source .venv/bin/activate
#    #     flake8 --max-line-length=88 --ignore=E203,F722,W503 bde
#
#    # - name: Test proper typehints with MyPy
#    #   if: ${{ always() }}
#    #   run: |
#    #     source .venv/bin/activate
#    #     # pip install --force-reinstall mypy==1.10
#    #     mypy --ignore-missing-imports --scripts-are-modules --follow-imports=skip bde/
